# -*- coding: utf-8 -*-
"""GenderRecogntion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m9QWppwWRWyLjimibdhfKVjq6_ROCNB8
"""

pip install kaggle

!kaggle datasets download -d divanshu22/gender-recognition-dataset

!unzip gender-recognition-dataset.zip -d gender_recognition_dataset

import os
import zipfile
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.optimizers import Adam

dataset_dir = 'gender_recognition_dataset'
train_data_dir = os.path.join(dataset_dir, 'Train')
validation_data_dir = os.path.join(dataset_dir, 'Validation')

img_width, img_height = 150, 150
batch_size = 32
epochs = 10
input_shape = (img_width, img_height, 3)
learning_rate = 0.001

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification: 1 neuron with sigmoid activation
])

model.compile(optimizer=Adam(learning_rate=learning_rate),
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.summary()

train_datagen = ImageDataGenerator(
    rescale=1.0/255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True
)

test_datagen = ImageDataGenerator(rescale=1.0/255)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary'
)

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary'
)

model.fit( train_generator,
    # steps_per_epoch=train_generator.samples // batch_size,
    epochs=epochs,
    validation_data=validation_generator,
    # validation_steps=validation_generator.samples // batch_size
)

model.save('gender_classification_model.h5')